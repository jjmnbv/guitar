@RestController
public class IndexController {
@Autowired
privateSysUserInfoService suis;//用于用户信息的curd
/**
* 登录 通过js_code 获取openid及session_key
* @param code
* @return
*/
@SuppressWarnings("null")
@ResponseBody
@RequestMapping("/vote.do")
publicMap<String,Object> listVote(@RequestParam(name = "js_code")String code) {
System.out.println("》》》收到请求，请求数据为[code：" + code + "]");
Map<String,Object>map=new HashMap<>();
//通过code换取网页授权web_access_token
if(code != null || !(code.equals(""))) {
StringCODE = code;
StringWebAccessToken = "";
StringopenId = "";
IntegeruserId=null;
//替换字符串，获得请求URL
Stringtoken = UserInfoUtil.getWebAccess(CODE);//通过自定义工具类组合出小程序需要的登录凭证 code
System.out.println("》》》组合token为：" +token);
//通过https方式请求获得web_access_token并获得小程序的返回
Stringresponse = HttpsUtil.httpsRequestToString(token, "GET", null);
//通过JsonObject解析小程序返回数据
JSONObjectjsonObject = JSON.parseObject(response);
System.out.println("jsonObject>>>"+ jsonObject);
//如果JasonObject或opeid为空则登录失败
if(null != jsonObject&&jsonObject.getString("openid")!=null) {
try{
//从jsonObject中获取sessionKey的值
WebAccessToken= jsonObject.getString("session_key");
//获取openid
openId= jsonObject.getString("openid");
System.out.println( "》》》获取access_token成功[session_key:"+ WebAccessToken + "---------------openid:" + openId);
//在这之后写自己想在登录中进行的各种操作
//本人这里判断该openid是否在数据库用户表中已存在
//SysUserInfoEntity是我自定义的实体类
//如果不存在则自动注册成新用户后返回userid
//如果存在则返回userid
SysUserInfoEntityone = suis.findByOpenId(openId);
if(one==null){
SysUserInfoEntityentity=new SysUserInfoEntity();
entity.setOpenId(openId);
SysUserInfoEntitysave = suis.save(entity);
userId=save.getId();
map.put("userid",userId);
}else{
userId=one.getId();
map.put("userid",userId);
}
map.put("userId",userId);
map.put("status",1);
map.put("msg","登录成功");
}catch (JSONException e) {
e.printStackTrace();
WebAccessToken= null;// 获取code失败
System.out.println("获取session_key失败");
map.put("stauts",0);
map.put("msg","登录失败");
}
}else{
System.out.println("获取openid及session_key失败");
map.put("stauts",0);
map.put("msg","登录失败");
}
}
returnmap;
}
}
